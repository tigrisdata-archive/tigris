// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/tigrisdata/tigris/api/server/v1"
	billing "github.com/tigrisdata/tigris/server/services/v1/billing"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// AddDefaultPlan provides a mock function with given fields: ctx, accountId
func (_m *Provider) AddDefaultPlan(ctx context.Context, accountId uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, accountId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return rf(ctx, accountId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, accountId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, accountId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_AddDefaultPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDefaultPlan'
type Provider_AddDefaultPlan_Call struct {
	*mock.Call
}

// AddDefaultPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - accountId uuid.UUID
func (_e *Provider_Expecter) AddDefaultPlan(ctx interface{}, accountId interface{}) *Provider_AddDefaultPlan_Call {
	return &Provider_AddDefaultPlan_Call{Call: _e.mock.On("AddDefaultPlan", ctx, accountId)}
}

func (_c *Provider_AddDefaultPlan_Call) Run(run func(ctx context.Context, accountId uuid.UUID)) *Provider_AddDefaultPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Provider_AddDefaultPlan_Call) Return(_a0 bool, _a1 error) *Provider_AddDefaultPlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Provider_AddDefaultPlan_Call) RunAndReturn(run func(context.Context, uuid.UUID) (bool, error)) *Provider_AddDefaultPlan_Call {
	_c.Call.Return(run)
	return _c
}

// AddPlan provides a mock function with given fields: ctx, accountId, planId
func (_m *Provider) AddPlan(ctx context.Context, accountId uuid.UUID, planId uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, accountId, planId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, accountId, planId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, accountId, planId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, accountId, planId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_AddPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPlan'
type Provider_AddPlan_Call struct {
	*mock.Call
}

// AddPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - accountId uuid.UUID
//   - planId uuid.UUID
func (_e *Provider_Expecter) AddPlan(ctx interface{}, accountId interface{}, planId interface{}) *Provider_AddPlan_Call {
	return &Provider_AddPlan_Call{Call: _e.mock.On("AddPlan", ctx, accountId, planId)}
}

func (_c *Provider_AddPlan_Call) Run(run func(ctx context.Context, accountId uuid.UUID, planId uuid.UUID)) *Provider_AddPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *Provider_AddPlan_Call) Return(_a0 bool, _a1 error) *Provider_AddPlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Provider_AddPlan_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (bool, error)) *Provider_AddPlan_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccount provides a mock function with given fields: ctx, namespaceId, name
func (_m *Provider) CreateAccount(ctx context.Context, namespaceId string, name string) (uuid.UUID, error) {
	ret := _m.Called(ctx, namespaceId, name)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (uuid.UUID, error)); ok {
		return rf(ctx, namespaceId, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) uuid.UUID); ok {
		r0 = rf(ctx, namespaceId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespaceId, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type Provider_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - namespaceId string
//   - name string
func (_e *Provider_Expecter) CreateAccount(ctx interface{}, namespaceId interface{}, name interface{}) *Provider_CreateAccount_Call {
	return &Provider_CreateAccount_Call{Call: _e.mock.On("CreateAccount", ctx, namespaceId, name)}
}

func (_c *Provider_CreateAccount_Call) Run(run func(ctx context.Context, namespaceId string, name string)) *Provider_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Provider_CreateAccount_Call) Return(_a0 uuid.UUID, _a1 error) *Provider_CreateAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Provider_CreateAccount_Call) RunAndReturn(run func(context.Context, string, string) (uuid.UUID, error)) *Provider_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvoiceById provides a mock function with given fields: ctx, accountId, invoiceId
func (_m *Provider) GetInvoiceById(ctx context.Context, accountId uuid.UUID, invoiceId string) (*api.ListInvoicesResponse, error) {
	ret := _m.Called(ctx, accountId, invoiceId)

	var r0 *api.ListInvoicesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (*api.ListInvoicesResponse, error)); ok {
		return rf(ctx, accountId, invoiceId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *api.ListInvoicesResponse); ok {
		r0 = rf(ctx, accountId, invoiceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ListInvoicesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, accountId, invoiceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_GetInvoiceById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvoiceById'
type Provider_GetInvoiceById_Call struct {
	*mock.Call
}

// GetInvoiceById is a helper method to define mock.On call
//   - ctx context.Context
//   - accountId uuid.UUID
//   - invoiceId string
func (_e *Provider_Expecter) GetInvoiceById(ctx interface{}, accountId interface{}, invoiceId interface{}) *Provider_GetInvoiceById_Call {
	return &Provider_GetInvoiceById_Call{Call: _e.mock.On("GetInvoiceById", ctx, accountId, invoiceId)}
}

func (_c *Provider_GetInvoiceById_Call) Run(run func(ctx context.Context, accountId uuid.UUID, invoiceId string)) *Provider_GetInvoiceById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *Provider_GetInvoiceById_Call) Return(_a0 *api.ListInvoicesResponse, _a1 error) *Provider_GetInvoiceById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Provider_GetInvoiceById_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (*api.ListInvoicesResponse, error)) *Provider_GetInvoiceById_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvoices provides a mock function with given fields: ctx, accountId, r
func (_m *Provider) GetInvoices(ctx context.Context, accountId uuid.UUID, r *api.ListInvoicesRequest) (*api.ListInvoicesResponse, error) {
	ret := _m.Called(ctx, accountId, r)

	var r0 *api.ListInvoicesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *api.ListInvoicesRequest) (*api.ListInvoicesResponse, error)); ok {
		return rf(ctx, accountId, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *api.ListInvoicesRequest) *api.ListInvoicesResponse); ok {
		r0 = rf(ctx, accountId, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ListInvoicesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *api.ListInvoicesRequest) error); ok {
		r1 = rf(ctx, accountId, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_GetInvoices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvoices'
type Provider_GetInvoices_Call struct {
	*mock.Call
}

// GetInvoices is a helper method to define mock.On call
//   - ctx context.Context
//   - accountId uuid.UUID
//   - r *api.ListInvoicesRequest
func (_e *Provider_Expecter) GetInvoices(ctx interface{}, accountId interface{}, r interface{}) *Provider_GetInvoices_Call {
	return &Provider_GetInvoices_Call{Call: _e.mock.On("GetInvoices", ctx, accountId, r)}
}

func (_c *Provider_GetInvoices_Call) Run(run func(ctx context.Context, accountId uuid.UUID, r *api.ListInvoicesRequest)) *Provider_GetInvoices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*api.ListInvoicesRequest))
	})
	return _c
}

func (_c *Provider_GetInvoices_Call) Return(_a0 *api.ListInvoicesResponse, _a1 error) *Provider_GetInvoices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Provider_GetInvoices_Call) RunAndReturn(run func(context.Context, uuid.UUID, *api.ListInvoicesRequest) (*api.ListInvoicesResponse, error)) *Provider_GetInvoices_Call {
	_c.Call.Return(run)
	return _c
}

// PushStorageEvents provides a mock function with given fields: ctx, events
func (_m *Provider) PushStorageEvents(ctx context.Context, events []*billing.StorageEvent) error {
	ret := _m.Called(ctx, events)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*billing.StorageEvent) error); ok {
		r0 = rf(ctx, events)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Provider_PushStorageEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushStorageEvents'
type Provider_PushStorageEvents_Call struct {
	*mock.Call
}

// PushStorageEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - events []*billing.StorageEvent
func (_e *Provider_Expecter) PushStorageEvents(ctx interface{}, events interface{}) *Provider_PushStorageEvents_Call {
	return &Provider_PushStorageEvents_Call{Call: _e.mock.On("PushStorageEvents", ctx, events)}
}

func (_c *Provider_PushStorageEvents_Call) Run(run func(ctx context.Context, events []*billing.StorageEvent)) *Provider_PushStorageEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*billing.StorageEvent))
	})
	return _c
}

func (_c *Provider_PushStorageEvents_Call) Return(_a0 error) *Provider_PushStorageEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_PushStorageEvents_Call) RunAndReturn(run func(context.Context, []*billing.StorageEvent) error) *Provider_PushStorageEvents_Call {
	_c.Call.Return(run)
	return _c
}

// PushUsageEvents provides a mock function with given fields: ctx, events
func (_m *Provider) PushUsageEvents(ctx context.Context, events []*billing.UsageEvent) error {
	ret := _m.Called(ctx, events)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*billing.UsageEvent) error); ok {
		r0 = rf(ctx, events)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Provider_PushUsageEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushUsageEvents'
type Provider_PushUsageEvents_Call struct {
	*mock.Call
}

// PushUsageEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - events []*billing.UsageEvent
func (_e *Provider_Expecter) PushUsageEvents(ctx interface{}, events interface{}) *Provider_PushUsageEvents_Call {
	return &Provider_PushUsageEvents_Call{Call: _e.mock.On("PushUsageEvents", ctx, events)}
}

func (_c *Provider_PushUsageEvents_Call) Run(run func(ctx context.Context, events []*billing.UsageEvent)) *Provider_PushUsageEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*billing.UsageEvent))
	})
	return _c
}

func (_c *Provider_PushUsageEvents_Call) Return(_a0 error) *Provider_PushUsageEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_PushUsageEvents_Call) RunAndReturn(run func(context.Context, []*billing.UsageEvent) error) *Provider_PushUsageEvents_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProvider(t mockConstructorTestingTNewProvider) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
