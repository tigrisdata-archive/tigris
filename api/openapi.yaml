# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi
openapi: 3.0.3
info:
    title: Tigris API Reference
    description: |-
        ## Overview
        This section is organized around HTTP APIs. The APIs accepts JSON requests and returns JSON-encoded responses. The APIs conforms to standard HTTP status codes.
    license:
        name: Apache License
        url: https://github.com/tigrisdata/tigris/blob/main/LICENSE
    version: 0.0.1
paths:
    /api/v1/databases/list:
        post:
            tags:
                - Databases
            summary: List Databases
            description: List returns all the databases.
            operationId: Tigris_ListDatabases
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListDatabasesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/databases/{db}/collections/list:
        post:
            tags:
                - Databases
            summary: List Collections
            description: List all the collections present in the database passed in the request.
            operationId: Tigris_ListCollections
            parameters:
                - name: db
                  in: path
                  description: List collection in this database.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ListCollectionsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListCollectionsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/databases/{db}/collections/{collection}/createOrUpdate:
        post:
            tags:
                - Collections
            summary: Create or update a collection
            description: |-
                Creates a new collection or atomically upgrades the collection to the new schema provided in the request.
                 Schema changes are applied atomically and immediately without any downtime.
                 This endpoint allows the creation of a collection based on the type. <p></p>
                 There are two collection types supported by Tigris:
                    <li> DOCUMENTS: Support CRUD APIs.
                    <li> MESSAGES: Supports Pub/Sub APIs.
            operationId: Tigris_CreateOrUpdateCollection
            parameters:
                - name: db
                  in: path
                  description: Database name where to create collection.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name to create.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateOrUpdateCollectionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateOrUpdateCollectionResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/databases/{db}/collections/{collection}/describe:
        post:
            tags:
                - Collections
            summary: Describe Collection
            description: Returns the information related to the collection. This can be used to retrieve the schema or size of the collection.
            operationId: Tigris_DescribeCollection
            parameters:
                - name: db
                  in: path
                  description: Name of the database.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Name of the collection.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DescribeCollectionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DescribeCollectionResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/databases/{db}/collections/{collection}/documents/delete:
        delete:
            tags:
                - Documents
            summary: Delete Documents
            description: Delete a range of documents in the collection using the condition provided in the filter.
            operationId: Tigris_Delete
            parameters:
                - name: db
                  in: path
                  description: Database name where to insert documents.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to insert documents.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/databases/{db}/collections/{collection}/documents/insert:
        post:
            tags:
                - Documents
            summary: Insert Documents
            description: |-
                Inserts new documents in the collection and returns an AlreadyExists error if any of the documents
                 in the request already exists. Insert provides idempotency by returning an error if the document
                 already exists. To replace documents, use REPLACE API instead of INSERT.
            operationId: Tigris_Insert
            parameters:
                - name: db
                  in: path
                  description: Database name where to insert documents.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to insert documents.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/InsertRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InsertResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/databases/{db}/collections/{collection}/documents/read:
        post:
            tags:
                - Documents
            summary: Read Documents
            description: |-
                Reads a range of documents from the collection. Tigris does not require you to
                 index any fields and automatically index all the fields which means you can filter by any field in the document.
                 An empty filter will trigger reading all the documents inside this collection. The API supports pagination that
                 can be used by passing `Limit/Skip` parameters. The `skip` parameter skips the number of documents from the start and
                 the `limit` parameter is used to specify the number of documents to read. You can find more detailed documentation
                 of the Read API <a href="https://docs.tigrisdata.com/overview/query" title="here">here</a>.
            operationId: Tigris_Read
            parameters:
                - name: db
                  in: path
                  description: Database name to read documents from.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name to read documents from.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ReadRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ReadResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/databases/{db}/collections/{collection}/documents/replace:
        put:
            tags:
                - Documents
            summary: Insert or Replace Documents
            description: Inserts the documents or replaces the existing documents in the collections.
            operationId: Tigris_Replace
            parameters:
                - name: db
                  in: path
                  description: Database name where to replace documents.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to replace documents.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ReplaceRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ReplaceResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/databases/{db}/collections/{collection}/documents/search:
        post:
            tags:
                - Documents
            summary: Search Documents
            description: |-
                Searches a collection for the documents matching the query. A search can be a term search or a phrase search.
                 Search API allows filtering the result set using filters as documented <a href="https://docs.tigrisdata.com/overview/query#specification-1" title="here">here</a>.
                 You can also perform a faceted search by passing the fields in the facet parameter.
                 You can find more detailed documentation of the Search API with multiple examples <a href="https://docs.tigrisdata.com/overview/search" title="here">here</a>.
            operationId: Tigris_Search
            parameters:
                - name: db
                  in: path
                  description: Database name to read documents from.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name to read documents from.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SearchRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SearchResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/databases/{db}/collections/{collection}/documents/update:
        put:
            tags:
                - Documents
            summary: Update Documents
            description: Update a range of documents in the collection using the condition provided in the filter.
            operationId: Tigris_Update
            parameters:
                - name: db
                  in: path
                  description: Database name where to update documents
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name where to update documents
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/databases/{db}/collections/{collection}/drop:
        delete:
            tags:
                - Collections
            summary: Drop Collection
            description: Drop the collection inside this database. This API deletes all of the documents inside this collection and any metadata associated with it.
            operationId: Tigris_DropCollection
            parameters:
                - name: db
                  in: path
                  description: Database name of the collection.
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  description: Collection name to drop.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DropCollectionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DropCollectionResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/databases/{db}/collections/{collection}/events:
        post:
            tags:
                - Events
            summary: Events Stream
            description: |-
                Stream real-time events for mutations made to the collections in the database. Each stream will have a transaction
                 identifier attached to it and will have a boolean flag “last” set to the last event of the transaction which will be useful
                 if a transaction performed more than one operation in the collection.
            operationId: Tigris_Events
            parameters:
                - name: db
                  in: path
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/EventsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/EventsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/databases/{db}/collections/{collection}/publish:
        post:
            tags:
                - Topics
            summary: Publish a message to a collection
            description: Publish API is use to publish messages to the collection.
            operationId: Tigris_Publish
            parameters:
                - name: db
                  in: path
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PublishRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PublishResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/databases/{db}/collections/{collection}/subscribe:
        post:
            tags:
                - Topics
            summary: Subscribe to a collection for a stream of messages
            description: Subscribe is used to subscribe to the collection and receive messages from it.
            operationId: Tigris_Subscribe
            parameters:
                - name: db
                  in: path
                  required: true
                  schema:
                    type: string
                - name: collection
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SubscribeRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SubscribeResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/databases/{db}/create:
        post:
            tags:
                - Databases
            summary: Create Database
            description: Creates a new database. Returns an AlreadyExists error with a status code 409 if the database already exists.
            operationId: Tigris_CreateDatabase
            parameters:
                - name: db
                  in: path
                  description: Create database with this name.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateDatabaseRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateDatabaseResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/databases/{db}/describe:
        post:
            tags:
                - Databases
            summary: Describe Database
            description: |-
                This API returns information related to the database along with all the collections inside the database.
                 This can be used to retrieve the size of the database or to retrieve schemas and the size of all the collections present in this database.
            operationId: Tigris_DescribeDatabase
            parameters:
                - name: db
                  in: path
                  description: Name of the database.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DescribeDatabaseRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DescribeDatabaseResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/databases/{db}/drop:
        delete:
            tags:
                - Databases
            summary: Drop Database
            description: Drop database deletes all the collections in this database along with all of the documents, and associated metadata for these collections.
            operationId: Tigris_DropDatabase
            parameters:
                - name: db
                  in: path
                  description: 'Drop database with this name. **Note**: Deletes all the collections in the database. Use with caution.'
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DropDatabaseRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DropDatabaseResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/databases/{db}/transactions/begin:
        post:
            tags:
                - Transactions
            summary: Begin a transaction
            description: |-
                Starts a new transaction and returns a transactional object. All reads/writes performed
                 within a transaction will run with serializable isolation.
            operationId: Tigris_BeginTransaction
            parameters:
                - name: db
                  in: path
                  description: Database name this transaction belongs to.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BeginTransactionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeginTransactionResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/databases/{db}/transactions/commit:
        post:
            tags:
                - Transactions
            summary: Commit a Transaction
            description: |-
                Atomically commit all the changes performed in the context of the transaction. Commit provides all
                 or nothing semantics by ensuring no partial updates are in the database due to a transaction failure.
            operationId: Tigris_CommitTransaction
            parameters:
                - name: db
                  in: path
                  description: Database name this transaction belongs to.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CommitTransactionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CommitTransactionResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/databases/{db}/transactions/rollback:
        post:
            tags:
                - Transactions
            summary: Rollback a transaction
            description: |-
                Rollback transaction discards all the changes
                 performed in the transaction
            operationId: Tigris_RollbackTransaction
            parameters:
                - name: db
                  in: path
                  description: Database name this transaction belongs to.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RollbackTransactionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RollbackTransactionResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/info:
        get:
            tags:
                - Info
            summary: Information about the server
            description: Provides the information about the server. This information includes returning the server version, etc.
            operationId: Tigris_GetInfo
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetInfoResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
components:
    schemas:
        BeginTransactionRequest:
            type: object
            properties:
                db:
                    type: string
                    description: Database name this transaction belongs to.
                options:
                    $ref: '#/components/schemas/TransactionOptions'
            description: Start new transaction in database specified by "db".
        BeginTransactionResponse:
            type: object
            properties:
                tx_ctx:
                    $ref: '#/components/schemas/TransactionCtx'
            description: Start transaction returns transaction context  which uniquely identifies the transaction
        CollectionDescription:
            type: object
            properties:
                collection:
                    type: string
                    description: Name of the collection.
                metadata:
                    $ref: '#/components/schemas/CollectionMetadata'
                schema:
                    type: object
                    description: Collections schema
                size:
                    type: integer
                    description: Collection size in bytes
                    format: int64
        CollectionInfo:
            type: object
            properties:
                collection:
                    type: string
                    description: Collection name.
                metadata:
                    $ref: '#/components/schemas/CollectionMetadata'
        CollectionMetadata:
            type: object
            properties:
                type:
                    enum:
                        - DOCUMENTS
                        - MESSAGES
                    type: string
                    format: enum
        CollectionOptions:
            type: object
            properties: {}
            description: Collection requests modifying options.
        CommitTransactionRequest:
            type: object
            properties:
                db:
                    type: string
                    description: Database name this transaction belongs to.
            description: Commit transaction with the given ID
        CommitTransactionResponse:
            type: object
            properties:
                status:
                    type: string
                    description: Status of commit transaction operation.
        CreateDatabaseRequest:
            type: object
            properties:
                db:
                    type: string
                    description: Create database with this name.
                options:
                    $ref: '#/components/schemas/DatabaseOptions'
        CreateDatabaseResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "created".
        CreateOrUpdateCollectionRequest:
            type: object
            properties:
                schema:
                    type: object
                    description: 'Schema of the documents in this collection. The schema specifications are same as JSON schema specification defined <a href="https://json-schema.org/specification.html" title="here">here</a>. <p></p>The following is an schema example: `{  "title": "user",  "description": "Collection of documents with details of users",  "properties": {    "id": {      "description": "A unique identifier for the user",      "type": "integer"    },    "name": {      "description": "Name of the user",      "type": "string",      "maxLength": 100    },    "balance": {      "description": "User account balance",      "type": "number"    }  },  "primary_key": ["id"] }`'
                only_create:
                    type: boolean
                    description: If set to true then the update schema request to the collection will fail by returning a conflict with HTTP Status code 409. The default is false.
                options:
                    $ref: '#/components/schemas/CollectionOptions'
                type:
                    enum:
                        - DOCUMENTS
                        - MESSAGES
                    type: string
                    description: 'Type of the collection. <li> DOCUMENTS: Support CRUD APIs. <li> MESSAGES: Supports Pub/Sub APIs.'
                    format: enum
        CreateOrUpdateCollectionResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "created" or "updated"
        DatabaseInfo:
            type: object
            properties:
                db:
                    type: string
                    description: Database name.
                metadata:
                    $ref: '#/components/schemas/DatabaseMetadata'
        DatabaseMetadata:
            type: object
            properties: {}
        DatabaseOptions:
            type: object
            properties: {}
            description: Database requests modifying options.
        DeleteRequest:
            type: object
            properties:
                filter:
                    type: object
                    description: 'Delete documents which matching specified filter. A filter can simply be key, value where key is the field name and value would be the value for this field. Or a filter can be logical where two or more fields can be logically joined using $or and $and. A few examples of filter: <li> To delete a user document where the id has a value 1: ```{"id": 1 }``` <li> To delete all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`'
                options:
                    $ref: '#/components/schemas/DeleteRequestOptions'
        DeleteRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
            description: Additional options for deleted requests.
        DeleteResponse:
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
                status:
                    type: string
                    description: an enum with value set as "deleted"
        DescribeCollectionRequest:
            type: object
            properties:
                db:
                    type: string
                    description: Name of the database.
                collection:
                    type: string
                    description: Name of the collection.
                options:
                    $ref: '#/components/schemas/CollectionOptions'
        DescribeCollectionResponse:
            type: object
            properties:
                collection:
                    type: string
                    description: Name of the collection.
                metadata:
                    $ref: '#/components/schemas/CollectionMetadata'
                schema:
                    type: object
                    description: Schema of this collection.
                size:
                    type: integer
                    description: The size of this collection in bytes.
                    format: int64
            description: A detailed description of the collection. The description returns collection metadata and the schema.
        DescribeDatabaseRequest:
            type: object
            properties:
                db:
                    type: string
                    description: Name of the database.
        DescribeDatabaseResponse:
            type: object
            properties:
                db:
                    type: string
                    description: Name of the database.
                metadata:
                    $ref: '#/components/schemas/DatabaseMetadata'
                collections:
                    type: array
                    items:
                        $ref: '#/components/schemas/CollectionDescription'
                    description: A detailed description about all the collections. The description returns collection metadata and the schema.
                size:
                    type: integer
                    description: Sum of all the collections sizes present in this database
                    format: int64
            description: A detailed description of the database and all the associated collections. Description of the collection includes schema details as well.
        DropCollectionRequest:
            type: object
            properties:
                options:
                    $ref: '#/components/schemas/CollectionOptions'
        DropCollectionResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "dropped".
        DropDatabaseRequest:
            type: object
            properties:
                db:
                    type: string
                    description: 'Drop database with this name. **Note**: Deletes all the collections in the database. Use with caution.'
                options:
                    $ref: '#/components/schemas/DatabaseOptions'
        DropDatabaseResponse:
            type: object
            properties:
                message:
                    type: string
                    description: A detailed response message.
                status:
                    type: string
                    description: An enum with value set as "dropped".
        Error:
            type: object
            properties:
                code:
                    enum:
                        - OK
                        - CANCELLED
                        - UNKNOWN
                        - INVALID_ARGUMENT
                        - DEADLINE_EXCEEDED
                        - NOT_FOUND
                        - ALREADY_EXISTS
                        - PERMISSION_DENIED
                        - RESOURCE_EXHAUSTED
                        - FAILED_PRECONDITION
                        - ABORTED
                        - OUT_OF_RANGE
                        - UNIMPLEMENTED
                        - INTERNAL
                        - UNAVAILABLE
                        - DATA_LOSS
                        - UNAUTHENTICATED
                        - CONFLICT
                        - BAD_GATEWAY
                        - METHOD_NOT_ALLOWED
                    type: string
                    description: The status code is a short, machine parsable string, which uniquely identifies the error type. Tigris to HTTP code mapping [here](/reference/http-code)
                    format: enum
                message:
                    type: string
                    description: A developer-facing descriptive error message
            description: The Error type defines a logical error model
        EventsRequest:
            type: object
            properties:
                db:
                    type: string
                collection:
                    type: string
                options:
                    $ref: '#/components/schemas/EventsRequestOptions'
        EventsRequestOptions:
            type: object
            properties: {}
        EventsResponse:
            type: object
            properties:
                event:
                    $ref: '#/components/schemas/StreamEvent'
        FacetCount:
            type: object
            properties:
                count:
                    type: integer
                    format: int64
                value:
                    type: string
        FacetStats:
            type: object
            properties:
                avg:
                    type: number
                    description: Average of all values in a field. Only available for numeric fields
                    format: double
                max:
                    type: number
                    description: Maximum of all values in a field. Only available for numeric fields
                    format: double
                min:
                    type: number
                    description: Minimum of all values in a field. Only available for numeric fields
                    format: double
                sum:
                    type: number
                    description: Sum of all values in a field. Only available for numeric fields
                    format: double
                count:
                    type: integer
                    description: Total number of values in a field
                    format: int64
            description: Additional stats for faceted field
        GetInfoResponse:
            type: object
            properties:
                server_version:
                    type: string
                error:
                    $ref: '#/components/schemas/Error'
        GoogleProtobufAny:
            type: object
            properties:
                '@type':
                    type: string
                    description: The type of the serialized message.
            additionalProperties: true
            description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
        InsertRequest:
            type: object
            properties:
                documents:
                    type: array
                    items:
                        type: object
                    description: Array of documents to insert. Each document is a JSON object.
                options:
                    $ref: '#/components/schemas/InsertRequestOptions'
        InsertRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
            description: additional options for insert requests.
        InsertResponse:
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
                status:
                    type: string
                    description: An enum with value set as "inserted"
                keys:
                    type: array
                    items:
                        type: string
                        format: bytes
                    description: an array returns the value of the primary keys.
        ListCollectionsRequest:
            type: object
            properties:
                db:
                    type: string
                    description: List collection in this database.
                options:
                    $ref: '#/components/schemas/CollectionOptions'
        ListCollectionsResponse:
            type: object
            properties:
                db:
                    type: string
                    description: Name of the database.
                collections:
                    type: array
                    items:
                        $ref: '#/components/schemas/CollectionInfo'
                    description: List of the collections info in the database.
        ListDatabasesResponse:
            type: object
            properties:
                databases:
                    type: array
                    items:
                        $ref: '#/components/schemas/DatabaseInfo'
                    description: List of the databases.
        Page:
            type: object
            properties:
                current:
                    type: integer
                    description: Number representing the current page of results
                    format: int32
                size:
                    type: integer
                    description: Maximum number of results per page
                    format: int32
            description: Pagination metadata for SearchResponse
        PublishRequest:
            type: object
            properties:
                db:
                    type: string
                collection:
                    type: string
                messages:
                    type: array
                    items:
                        type: object
                options:
                    $ref: '#/components/schemas/PublishRequestOptions'
        PublishRequestOptions:
            type: object
            properties: {}
        PublishResponse:
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
                status:
                    type: string
                keys:
                    type: array
                    items:
                        type: string
                        format: bytes
        ReadRequest:
            type: object
            properties:
                filter:
                    type: object
                    description: 'Returns documents matching this filter. A filter can simply be a key, value pair where a key is the field name and the value would be the value for this field. Tigris also allows complex filtering by passing logical expressions. Logical filters are applied on two or more fields using `$or` and `$and`. A few examples of filters: <li> To read a user document where the id has a value 1: ```{"id": 1 }``` <li> To read all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}` The detailed documentation of the filter is <a href="https://docs.tigrisdata.com/overview/query#specification-1" title="here">here</a>.'
                fields:
                    type: object
                    description: To read specific fields from a document. Default is all.
                options:
                    $ref: '#/components/schemas/ReadRequestOptions'
        ReadRequestOptions:
            type: object
            properties:
                limit:
                    type: integer
                    description: Limit the number of documents returned by the read operation.
                    format: int64
                skip:
                    type: integer
                    description: Number of documents to skip before starting to return resulting documents.
                    format: int64
                offset:
                    type: string
                    description: A cursor for use in pagination. The next streams will return documents after this offset.
                    format: bytes
            description: Options that can be used to modify the results, for example "limit" to control the number of documents returned by the server.
        ReadResponse:
            type: object
            properties:
                data:
                    type: object
                    description: Object containing the collection document.
                resume_token:
                    type: string
                    description: An internal key, used for pagination.
                    format: bytes
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
        ReplaceRequest:
            type: object
            properties:
                documents:
                    type: array
                    items:
                        type: object
                    description: Array of documents to be replaced. Each document is a JSON object.
                options:
                    $ref: '#/components/schemas/ReplaceRequestOptions'
        ReplaceRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
            description: Additional options for replace requests.
        ReplaceResponse:
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
                status:
                    type: string
                    description: an enum with value set as "replaced"
                keys:
                    type: array
                    items:
                        type: string
                        format: bytes
                    description: an array returns the value of the primary keys.
        ResponseMetadata:
            type: object
            properties:
                created_at:
                    type: string
                    description: Time at which the document was inserted/replaced. Measured in nano-seconds since the Unix epoch.
                    format: date-time
                updated_at:
                    type: string
                    description: Time at which the document was updated. Measured in nano-seconds since the Unix epoch.
                    format: date-time
                deleted_at:
                    type: string
                    description: Time at which the document was deleted. Measured in nano-seconds since the Unix epoch.
                    format: date-time
            description: Has metadata related to the documents stored.
        RollbackTransactionRequest:
            type: object
            properties:
                db:
                    type: string
                    description: Database name this transaction belongs to.
            description: Rollback transaction with the given ID
        RollbackTransactionResponse:
            type: object
            properties:
                status:
                    type: string
                    description: Status of rollback transaction operation.
        SearchFacet:
            type: object
            properties:
                counts:
                    type: array
                    items:
                        $ref: '#/components/schemas/FacetCount'
                stats:
                    $ref: '#/components/schemas/FacetStats'
        SearchHit:
            type: object
            properties:
                data:
                    type: object
                    description: Actual search document
                metadata:
                    $ref: '#/components/schemas/SearchHitMeta'
        SearchHitMeta:
            type: object
            properties:
                created_at:
                    type: string
                    description: Time at which the document was inserted/replaced. Measured in nano-seconds since the Unix epoch.
                    format: date-time
                updated_at:
                    type: string
                    description: Time at which the document was updated. Measured in nano-seconds since the Unix epoch.
                    format: date-time
            description: Contains metadata related to the search hit, has information about document created_at/updated_at as well.
        SearchMetadata:
            type: object
            properties:
                found:
                    type: integer
                    description: Total number of search results across all pages
                    format: int64
                total_pages:
                    type: integer
                    description: Number representing the total pages of results
                    format: int32
                page:
                    $ref: '#/components/schemas/Page'
        SearchRequest:
            type: object
            properties:
                db:
                    type: string
                    description: Database name to read documents from.
                collection:
                    type: string
                    description: Collection name to read documents from.
                q:
                    type: string
                    description: Query string for searching across text fields
                search_fields:
                    type: array
                    items:
                        type: string
                    description: Array of fields to project search query against
                filter:
                    type: object
                    description: Filter stacks on top of query results to further narrow down the results. Similar to `ReadRequest.filter`
                facet:
                    type: object
                    description: 'Facet query to aggregate results on given fields. The field name for the facet search can be passed like this `{"brand": { "size": 10 }}` where the size controls the total facets for this field.'
                sort:
                    type: object
                    description: 'Array of fields and corresponding sort orders to order the results `[{ "salary": "$desc" }]`'
                include_fields:
                    type: array
                    items:
                        type: string
                    description: Array of document field names to include in results. By default, all fields are included.
                exclude_fields:
                    type: array
                    items:
                        type: string
                    description: Array of document field names to exclude from results. `include_fields`, if specified, takes precedence over `exclude_fields`.
                page_size:
                    type: integer
                    description: Optionally can set the number of hits to be returned per page, default is 20.
                    format: int32
                page:
                    type: integer
                    description: Optionally can specify the page to retrieve. If page is set then only hits for this page is returned
                    format: int32
                fields:
                    type: object
        SearchResponse:
            type: object
            properties:
                hits:
                    type: array
                    items:
                        $ref: '#/components/schemas/SearchHit'
                facets:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/SearchFacet'
                meta:
                    $ref: '#/components/schemas/SearchMetadata'
            description: Response struct for search
        Status:
            type: object
            properties:
                code:
                    type: integer
                    description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
                    format: int32
                message:
                    type: string
                    description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
                details:
                    type: array
                    items:
                        $ref: '#/components/schemas/GoogleProtobufAny'
                    description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.
            description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
        StreamEvent:
            type: object
            properties:
                tx_id:
                    type: string
                    format: bytes
                collection:
                    type: string
                op:
                    type: string
                key:
                    type: string
                    format: bytes
                lkey:
                    type: string
                    format: bytes
                rkey:
                    type: string
                    format: bytes
                data:
                    type: object
                last:
                    type: boolean
        SubscribeRequest:
            type: object
            properties:
                db:
                    type: string
                collection:
                    type: string
                options:
                    $ref: '#/components/schemas/SubscribeRequestOptions'
        SubscribeRequestOptions:
            type: object
            properties: {}
        SubscribeResponse:
            type: object
            properties:
                message:
                    type: string
                    format: bytes
        TransactionCtx:
            type: object
            properties:
                id:
                    type: string
                    description: Unique for a single transactional request.
                origin:
                    type: string
                    description: Serves as an internal identifier.
            description: Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the metadata (headers) of subsequent requests in order to run them in the context of the same transaction.
        TransactionOptions:
            type: object
            properties: {}
            description: Options that can be used to modify the transaction semantics.
        UpdateRequest:
            type: object
            properties:
                fields:
                    type: object
                    description: Fields contains set of fields with the values which need to be updated. Should be proper JSON object.
                filter:
                    type: object
                    description: 'Update documents which matching specified filter. A filter can simply be key, value where key is the field name and value would be the value for this field. Or a filter can be logical where two or more fields can be logically joined using $or and $and. A few examples of filter: <li> To update a user document where the id has a value 1: ```{"id": 1 }``` <li> To update all the user documents where the key "id" has a value 1 or 2 or 3: `{"$or": [{"id": 1}, {"id": 2}, {"id": 3}]}`'
                options:
                    $ref: '#/components/schemas/UpdateRequestOptions'
        UpdateRequestOptions:
            type: object
            properties:
                write_options:
                    $ref: '#/components/schemas/WriteOptions'
            description: Additional options for update requests.
        UpdateResponse:
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
                modified_count:
                    type: integer
                    description: Returns the number of documents modified.
                    format: int32
                status:
                    type: string
                    description: an enum with value set as "updated".
        WriteOptions:
            type: object
            properties: {}
            description: Additional options to modify write requests.
    securitySchemes:
        BearerAuth:
            type: http
            scheme: bearer
tags:
    - name: Collections
      description: The Collections section provide APIs that can be used to manage collections. A collection can have one or more documents.
    - name: Databases
      description: The Databases section provide APIs that can be used to manage databases. A single database can have one or more collections.
    - name: Documents
      description: The Documents section provide APIs to manage documents insides a collection. Uniqueness of documents are enforced by the primary key.
    - name: Events
      description: Real time events for the changes made into the collection.
    - name: Info
      description: APIs to manage or get more information about the server.
    - name: Topics
      description: Built-in event streaming to support Pub/Sub APIs. This functionality is enabled for the “Messages” collection type. This type of collection exposes two endpoints Publish and Subscribe which enable building event-driven applications. Tigris guarantees total ordering of events which eliminates the need of managing any partition level metadata.
    - name: Transactions
      description: Transactional APIs are used to control the state of the transaction by explicitly starting a transaction and ending it using the commit/rollback endpoint. All operations performed in a transaction acts as a single unit. Tigris offers global transactions, with ACID properties and strict serializability.
