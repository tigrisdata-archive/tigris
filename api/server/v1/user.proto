// Copyright 2022 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

option go_package = "github.com/tigrisdata/tigrisdb/api";

// BUG: gnostic protoc-gen-openapi doesn't support enum generation
// https://github.com/google/gnostic/issues/255

message WriteOption {
  TransactionCtx tx_ctx = 1;
}

message ReadOption {
  TransactionCtx tx_ctx = 1;
}

message DatabaseOption {}
message CollectionOption {}
message TransactionOption {}

message TransactionCtx {
  string id = 1;
  string origin = 2;
}

message BeginTransactionRequest {
  string project = 1;
  string db = 2;
  TransactionOption options = 3;
}
message BeginTransactionResponse {
  TransactionCtx tx_ctx = 1;
}

message CommitTransactionRequest {
  string project = 1;
  string db = 2;
  TransactionCtx tx_ctx = 3;
}
message CommitTransactionResponse {}

message RollbackTransactionRequest {
  string project = 1;
  string db = 2;
  TransactionCtx tx_ctx = 3;
}
message RollbackTransactionResponse {}

message InsertRequest {
  string project = 1;
  string db = 2;
  string collection = 3;
  repeated bytes documents = 4;
  WriteOption options = 5;
}

message InsertResponse {}

message DeleteRequest {
  string project = 1;
  string db = 2;
  string collection = 3;
  bytes filter = 4;
  WriteOption options = 5;
}

message DeleteResponse {}

message ReplaceRequest {
  string project = 1;
  string db = 2;
  string collection = 3;
  repeated bytes documents = 4;
  WriteOption options = 5;
}

message ReplaceResponse {}

message UpdateRequest {
  string project = 1;
  string db = 2;
  string collection = 3;
  bytes fields = 4;
  bytes filter = 5;
  WriteOption options = 6;
}

message UpdateResponse {
  int32 rc = 1;
}

message ReadRequest {
  string project = 1;
  string db = 2;
  string collection = 3;
  bytes filter = 4;
  ReadOption options = 5;
}

message ReadResponse {
  bytes doc = 1;
}

message CreateDatabaseRequest {
  string project = 1;
  string db = 2;
  DatabaseOption options = 3;
}

message CreateDatabaseResponse {
  string msg = 1;
}

message DropDatabaseRequest {
  string project = 1;
  string db = 2;
  DatabaseOption options = 3;
}

message DropDatabaseResponse {
  string msg = 1;
}

message CreateCollectionRequest {
  string project = 1;
  string db = 2;
  string collection = 3;
  google.protobuf.Struct schema = 4;
  CollectionOption options = 5;
}

message CreateCollectionResponse {
  string msg = 1;
}

message AlterCollectionRequest {
  string project = 1;
  string db = 2;
  string collection = 3;
  google.protobuf.Struct schema = 4;
  CollectionOption options = 5;
}

message AlterCollectionResponse {
  string msg = 1;
}

message DropCollectionRequest {
  string project = 1;
  string db = 2;
  string collection = 3;
  CollectionOption options = 4;
}

message DropCollectionResponse {
  string msg = 1;
}

message TruncateCollectionRequest {
  string project = 1;
  string db = 2;
  string collection = 3;
}

message TruncateCollectionResponse {
  string msg = 1;
}

message ListDatabasesRequest {
  string project = 1;
}

message ListDatabasesResponse {
  repeated string dbs = 1;
}

message ListCollectionsRequest {
  string project = 1;
  string db = 2;
}

message ListCollectionsResponse {
  repeated string collections = 1;
}

message CreateProjectRequest {
  string project = 1;
  ProjectOption options = 2;
}

message CreateProjectResponse {
  string msg = 1;
}

message DeleteProjectRequest {
  string project = 1;
  ProjectOption options = 2;
}

message DeleteProjectResponse {
  string msg = 1;
}

message ListProjectsRequest {
}

message ListProjectsResponse {
  repeated string projects = 1;
}

message ProjectOption {
}

service TigrisDB {
  // Transactional APIs
  rpc BeginTransaction(BeginTransactionRequest) returns (BeginTransactionResponse) {
    option (google.api.http) = {
      post : "/api/v1/projects/{project}/databases/{db}/transactions/begin"
      body : "*"
    };
  }
  rpc CommitTransaction(CommitTransactionRequest) returns (CommitTransactionResponse) {
    option (google.api.http) = {
      post : "/api/v1/projects/{project}/databases/{db}/transactions/commit"
      body : "*"
    };
  }
  rpc RollbackTransaction(RollbackTransactionRequest) returns (RollbackTransactionResponse) {
    option (google.api.http) = {
      post : "/api/v1/projects/{project}/databases/{db}/transactions/rollback"
      body : "*"
    };
  }

  // Following APIs are related to DMLs supported by TigrisDB
  rpc Insert(InsertRequest) returns (InsertResponse) {
    option (google.api.http) = {
      post : "/api/v1/projects/{project}/databases/{db}/collections/{collection}/documents/insert"
      body : "*"
    };
  }
  rpc Replace(ReplaceRequest) returns (ReplaceResponse) {
    option (google.api.http) = {
      put : "/api/v1/projects/{project}/databases/{db}/collections/{collection}/documents/replace"
      body : "*"
    };
  }
  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      delete : "/api/v1/projects/{project}/databases/{db}/collections/{collection}/documents/delete"
      body : "*"
    };
  }
  rpc Update(UpdateRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      put : "/api/v1/projects/{project}/databases/{db}/collections/{collection}/documents/update"
      body : "*"
    };
  }
  rpc Read(ReadRequest) returns (stream ReadResponse) {
    option (google.api.http) = {
      post : "/api/v1/projects/{project}/databases/{db}/collections/{collection}/documents/read"
      body : "*"
    };
  }

  // The following APIs are related to DDLs supported by TigrisDB
  rpc CreateCollection(CreateCollectionRequest) returns (CreateCollectionResponse) {
    option (google.api.http) = {
      post : "/api/v1/projects/{project}/databases/{db}/collections/{collection}/create"
      body : "*"
    };
  }
  rpc AlterCollection(AlterCollectionRequest) returns (AlterCollectionResponse) {
    option (google.api.http) = {
      post : "/api/v1/projects/{project}/databases/{db}/collections/{collection}/alter"
      body : "*"
    };
  }
  rpc DropCollection(DropCollectionRequest) returns (DropCollectionResponse) {
    option (google.api.http) = {
      delete : "/api/v1/projects/{project}/databases/{db}/collections/{collection}/drop"
    };
  }
  rpc TruncateCollection(TruncateCollectionRequest) returns (TruncateCollectionResponse) {
    option (google.api.http) = {
      delete : "/api/v1/projects/{project}/databases/{db}/collections/{collection}/truncate"
    };
  }
  rpc ListDatabases(ListDatabasesRequest) returns (ListDatabasesResponse) {
    option (google.api.http) = {
      get : "/api/v1/projects/{project}/databases/list"
    };
  }
  rpc ListCollections(ListCollectionsRequest) returns (ListCollectionsResponse) {
    option (google.api.http) = {
      get : "/api/v1/projects/{project}/databases/{db}/collections/list"
    };
  }

  rpc CreateDatabase(CreateDatabaseRequest) returns (CreateDatabaseResponse) {
    option (google.api.http) = {
      post : "/api/v1/projects/{project}/databases/{db}/create"
      body : "*"
    };
  }

  rpc DropDatabase(DropDatabaseRequest) returns (DropDatabaseResponse) {
    option (google.api.http) = {
      delete : "/api/v1/projects/{project}/databases/{db}/drop"
      body : "*"
    };
  }

  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {
    option (google.api.http) = {
      post : "/api/v1/projects/{project}/create"
      body : "*"
    };
  }

  rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {
    option (google.api.http) = {
      delete : "/api/v1/projects/{project}/delete"
      body : "*"
    };
  }

  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {
      get : "/api/v1/projects/list"
    };
  }
}
