// Copyright 2022 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

option go_package = "github.com/tigrisdata/tigrisdb/api";

// BUG: gnostic protoc-gen-openapi doesn't support enum generation
// https://github.com/google/gnostic/issues/255
// BUG: grpc-gateway doesn't support in-process streaming
// https://github.com/fullstorydev/grpchan
// https://github.com/grpc/grpc-go/issues/906
enum StatusCode {
  StatusCode_UNKNOWN = 0;
  StatusCode_OK = 200;
  StatusCode_BAD_REQUEST = 400;
  StatusCode_NOT_FOUND = 404;
  StatusCode_CONFLICT = 409;
  StatusCode_NOT_IMPLEMENTED = 501;
  StatusCode_INTERNAL_SERVER_ERROR = 500;
}

message WriteResponseHeader {
    int32 code = 1;
    string msg = 2;
}

message Filter {
  repeated Clause clause = 1;
}

message Clause {
  google.protobuf.Struct value = 1;
}

message WriteOption {}
message ReadOption {}
message DocOption {}

message UserDocument {
  google.protobuf.Struct doc = 1;
  DocOption options = 2;
}

message InsertRequest {
  string db = 1;
  string collection = 2;
  InsertRequestBody insert_body = 3;
}

message InsertRequestBody {
  repeated UserDocument documents = 1;
  WriteOption options = 2;
}

message InsertResponse {
  WriteResponseHeader header = 1;
}

message DeleteRequest {
  string db = 1;
  string collection = 2;
  DeleteRequestBody delete_body = 3;
}

message DeleteRequestBody {
  Filter filter = 1;
  WriteOption options = 2;
}

message DeleteResponse {
  WriteResponseHeader header = 1;
}

message ReplaceRequest {
  string db = 1;
  string collection = 2;
  ReplaceRequestBody replace_body = 3;
}

message ReplaceRequestBody {
  repeated UserDocument documents = 1;
  WriteOption options = 2;
}

message ReplaceResponse {
  WriteResponseHeader header = 1;
}

message UpdateRequest {
  string db = 1;
  string collection = 2;
  UpdateRequestBody update_body = 3;
 }

message UpdateRequestBody {
  google.protobuf.Struct fields = 1;
  Filter filter = 2;
  WriteOption options = 3;
}

message UpdateResponse {
  WriteResponseHeader header = 1;
}

message ReadRequest {
  string db = 1;
  string collection = 2;
  ReadRequestBody read_body = 3;
}

message ReadRequestBody {
  Filter filter = 1;
  repeated UserDocument keys = 2;
  ReadOption options = 3;
}

message ReadResponse {
  WriteResponseHeader header = 1;
  UserDocument doc = 2;
}

message CreateCollectionRequest {
  string db = 1;
  string collection = 2;
}

message CreateCollectionResponse {
  WriteResponseHeader header = 1;
}

message AlterCollectionRequest {
  string db = 1;
  string collection = 2;
}

message AlterCollectionResponse {
  WriteResponseHeader header = 1;
}

message DropCollectionRequest {
  string db = 1;
  string collection = 2;
}

message DropCollectionResponse {
  WriteResponseHeader header = 1;
}
message TruncateCollectionRequest {
  string db = 1;
  string collection = 2;
}

message TruncateCollectionResponse {
  WriteResponseHeader header = 1;
}

// TODO: query and alter table apis
service TigrisDB {
  // Following APIs are related to DMLs supported by TigrisDB
  rpc Insert(InsertRequest) returns (InsertResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/collections/{collection}/documents/insert"
      body : "*"
    };
  }
  rpc Replace(ReplaceRequest) returns (ReplaceResponse) {
    option (google.api.http) = {
      put : "/api/v1/databases/{db}/collections/{collection}/documents/replace"
      body : "*"
    };
  }
  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      delete : "/api/v1/databases/{db}/collections/{collection}/documents/delete"
        };
  }
  rpc Update(UpdateRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      put : "/api/v1/databases/{db}/collections/{collection}/documents/update"
      body : "*"
    };
  }
  rpc Read(ReadRequest) returns (stream ReadResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/collections/{collection}/documents/read"
      body : "*"
    };
  }

  // The following APIs are related to DDLs supported by TigrisDB
  rpc CreateCollection(CreateCollectionRequest) returns (CreateCollectionResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/collections/{collection}/create"
      body : "*"
    };
  }
  rpc AlterCollection(AlterCollectionRequest) returns (AlterCollectionResponse) {
    option (google.api.http) = {
      post : "/api/v1/databases/{db}/collections/{collection}/alter"
      body : "*"
    };
  }
  rpc DropCollection(DropCollectionRequest) returns (DropCollectionResponse) {
    option (google.api.http) = {
      delete : "/api/v1/databases/{db}/collections/{collection}/drop"
    };
  }
  rpc TruncateCollection(TruncateCollectionRequest) returns (TruncateCollectionResponse) {
    option (google.api.http) = {
      delete : "/api/v1/databases/{db}/collections/{collection}/truncate"
    };
  }
}