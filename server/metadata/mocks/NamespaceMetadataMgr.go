// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	metadata "github.com/tigrisdata/tigris/server/metadata"
)

// NamespaceMetadataMgr is an autogenerated mock type for the NamespaceMetadataMgr type
type NamespaceMetadataMgr struct {
	mock.Mock
}

type NamespaceMetadataMgr_Expecter struct {
	mock *mock.Mock
}

func (_m *NamespaceMetadataMgr) EXPECT() *NamespaceMetadataMgr_Expecter {
	return &NamespaceMetadataMgr_Expecter{mock: &_m.Mock}
}

// GetNamespaceMetadata provides a mock function with given fields: ctx, namespaceId
func (_m *NamespaceMetadataMgr) GetNamespaceMetadata(ctx context.Context, namespaceId string) *metadata.NamespaceMetadata {
	ret := _m.Called(ctx, namespaceId)

	var r0 *metadata.NamespaceMetadata
	if rf, ok := ret.Get(0).(func(context.Context, string) *metadata.NamespaceMetadata); ok {
		r0 = rf(ctx, namespaceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.NamespaceMetadata)
		}
	}

	return r0
}

// NamespaceMetadataMgr_GetNamespaceMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespaceMetadata'
type NamespaceMetadataMgr_GetNamespaceMetadata_Call struct {
	*mock.Call
}

// GetNamespaceMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - namespaceId string
func (_e *NamespaceMetadataMgr_Expecter) GetNamespaceMetadata(ctx interface{}, namespaceId interface{}) *NamespaceMetadataMgr_GetNamespaceMetadata_Call {
	return &NamespaceMetadataMgr_GetNamespaceMetadata_Call{Call: _e.mock.On("GetNamespaceMetadata", ctx, namespaceId)}
}

func (_c *NamespaceMetadataMgr_GetNamespaceMetadata_Call) Run(run func(ctx context.Context, namespaceId string)) *NamespaceMetadataMgr_GetNamespaceMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NamespaceMetadataMgr_GetNamespaceMetadata_Call) Return(_a0 *metadata.NamespaceMetadata) *NamespaceMetadataMgr_GetNamespaceMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NamespaceMetadataMgr_GetNamespaceMetadata_Call) RunAndReturn(run func(context.Context, string) *metadata.NamespaceMetadata) *NamespaceMetadataMgr_GetNamespaceMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshNamespaceAccounts provides a mock function with given fields: ctx
func (_m *NamespaceMetadataMgr) RefreshNamespaceAccounts(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NamespaceMetadataMgr_RefreshNamespaceAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshNamespaceAccounts'
type NamespaceMetadataMgr_RefreshNamespaceAccounts_Call struct {
	*mock.Call
}

// RefreshNamespaceAccounts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *NamespaceMetadataMgr_Expecter) RefreshNamespaceAccounts(ctx interface{}) *NamespaceMetadataMgr_RefreshNamespaceAccounts_Call {
	return &NamespaceMetadataMgr_RefreshNamespaceAccounts_Call{Call: _e.mock.On("RefreshNamespaceAccounts", ctx)}
}

func (_c *NamespaceMetadataMgr_RefreshNamespaceAccounts_Call) Run(run func(ctx context.Context)) *NamespaceMetadataMgr_RefreshNamespaceAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *NamespaceMetadataMgr_RefreshNamespaceAccounts_Call) Return(_a0 error) *NamespaceMetadataMgr_RefreshNamespaceAccounts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NamespaceMetadataMgr_RefreshNamespaceAccounts_Call) RunAndReturn(run func(context.Context) error) *NamespaceMetadataMgr_RefreshNamespaceAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNamespaceMetadata provides a mock function with given fields: ctx, meta
func (_m *NamespaceMetadataMgr) UpdateNamespaceMetadata(ctx context.Context, meta metadata.NamespaceMetadata) error {
	ret := _m.Called(ctx, meta)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, metadata.NamespaceMetadata) error); ok {
		r0 = rf(ctx, meta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NamespaceMetadataMgr_UpdateNamespaceMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNamespaceMetadata'
type NamespaceMetadataMgr_UpdateNamespaceMetadata_Call struct {
	*mock.Call
}

// UpdateNamespaceMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - meta metadata.NamespaceMetadata
func (_e *NamespaceMetadataMgr_Expecter) UpdateNamespaceMetadata(ctx interface{}, meta interface{}) *NamespaceMetadataMgr_UpdateNamespaceMetadata_Call {
	return &NamespaceMetadataMgr_UpdateNamespaceMetadata_Call{Call: _e.mock.On("UpdateNamespaceMetadata", ctx, meta)}
}

func (_c *NamespaceMetadataMgr_UpdateNamespaceMetadata_Call) Run(run func(ctx context.Context, meta metadata.NamespaceMetadata)) *NamespaceMetadataMgr_UpdateNamespaceMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metadata.NamespaceMetadata))
	})
	return _c
}

func (_c *NamespaceMetadataMgr_UpdateNamespaceMetadata_Call) Return(_a0 error) *NamespaceMetadataMgr_UpdateNamespaceMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NamespaceMetadataMgr_UpdateNamespaceMetadata_Call) RunAndReturn(run func(context.Context, metadata.NamespaceMetadata) error) *NamespaceMetadataMgr_UpdateNamespaceMetadata_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewNamespaceMetadataMgr interface {
	mock.TestingT
	Cleanup(func())
}

// NewNamespaceMetadataMgr creates a new instance of NamespaceMetadataMgr. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNamespaceMetadataMgr(t mockConstructorTestingTNewNamespaceMetadataMgr) *NamespaceMetadataMgr {
	mock := &NamespaceMetadataMgr{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
